
import os
from pathlib import Path

def output_vmat(folder, material_name, mat_params, parallax=False, white=False, dirty=False):

    full_path = f"{folder}\\{material_name}.vmat"

    if Path(full_path).exists():
        print(f"Material already exists: {full_path}")
        return False

    print("\n## Output material ##")
    print(f"Folder: {folder}")
    print(f"Name: {material_name}")
    print(f"Params:")
    for key in mat_params:
        print(f"\t{key}: {mat_params[key]}")
    
    if parallax:
        mat_params['mat_shader'] = "parallax_occlusion.vfx"

    if dirty:
        mat_params['mat_shader'] = "complex.vfx"
    

    vmat_file = open(full_path, "w")

    vmat_file.write("// Auto generated by Python!\n")
    vmat_file.write("Layer0\n")
    vmat_file.write("{\n")

    vmat_file.write(f"\tshader \"{mat_params['mat_shader']}\"\n")

    if mat_params["mat_shader"] == "complex.vfx":
        vmat_file.write('\tF_SPECULAR 1\n')

    # TINT
    vmat_file.write('\tg_flModelTintAmount "1.000\"\n')
    vmat_file.write('\tg_vColorTint "[1.000000 1.000000 1.000000 0.000000]"\n')

    # BASE COLOR
    if white:
        vmat_file.write(f'\tTextureColor "[1.000000 1.000000 1.000000 0.000000]"\n')
    else:
        vmat_file.write(f'\tTextureColor "{mat_params["mat_color_path"]}"\n')


    vmat_file.write(f'\tg_flFadeExponent "1.000"\n')
    vmat_file.write(f'\tg_bFogEnabled "1"\n')

    vmat_file.write(f'\tg_flDirectionalLightmapMinZ "0.050"\n')
    vmat_file.write(f'\tg_flDirectionalLightmapStrength "1.000"\n')

    # NORMAL
    if mat_params["mat_normal_path"]:
        vmat_file.write(f'\tTextureNormal "{mat_params["mat_normal_path"]}"\n')

    # ROUGHNESS
    if mat_params["mat_rough_path"]:
        vmat_file.write(f'\tTextureRoughness "{mat_params["mat_rough_path"]}"\n')

    # AMBIENT OCCLUSION
    if mat_params["mat_ao_path"]:
        vmat_file.write(f'\tTextureAmbientOcclusion "{mat_params["mat_ao_path"]}"\n')
        vmat_file.write(f'\tg_flAmbientOcclusionDirectDiffuse "0.000"\n')
        vmat_file.write(f'\tg_flAmbientOcclusionDirectSpecular "0.000"\n')

    # METALNESS
    if mat_params['mat_metalness_path']:
        vmat_file.write(f'\tF_METALNESS_TEXTURE 1\n')
        vmat_file.write(f'\tTextureMetalness "{mat_params["mat_metalness_path"]}"\n')
    else:
        vmat_file.write(f'\tg_flMetalness "0.000"\n')

    # OPACITY
    if mat_params['mat_opacity_path']:
        vmat_file.write(f'\tF_ALPHA_TEST 1\n')
        vmat_file.write(f'\tg_flAlphaTestReference "0.500"\n')
        vmat_file.write(f'\tg_flAntiAliasedEdgeStrength "1.000"\n')
        vmat_file.write(f'\tTextureTranslucency "{mat_params["mat_opacity_path"]}"\n')

    # PARALLAX
    if parallax:
        vmat_file.write(f'\tg_flHeightMapScale "0.020"\n')
        vmat_file.write(f'\tg_nLODThreshold "4"\n')
        vmat_file.write(f'\tg_nMaxSamples "32"\n')
        vmat_file.write(f'\tg_nMinSamples "8"\n')
        vmat_file.write(f'\tTextureHeight "{mat_params["mat_height_path"]}"\n')


    # DIRTY
    if dirty:
        vmat_file.write(f'\tF_DETAIL_TEXTURE 1 // Mod2X\n')
        vmat_file.write(f'\tg_flDetailBlendFactor "0.716"\n')
        vmat_file.write(f'\tg_flDetailBlendToFull "0.000"\n')
        vmat_file.write(f'\tg_flDetailTexCoordRotation "0.000"\n')
        vmat_file.write(f'\tg_vDetailTexCoordOffset "[0.000 0.000]"\n')
        vmat_file.write(f'\tg_vDetailTexCoordScale "[1.000 1.000]"\n')
        vmat_file.write(f'\tTextureDetail "materials/cc0textures/plaster001/plaster001_2k_displacement.jpg"\n') # todo: not hardcoded
        vmat_file.write(f'\tTextureDetailMask "materials/default/default_detailmask.tga"\n')

    # texture coordinates
    vmat_file.write(f'\tg_nScaleTexCoordUByModelScaleAxis "0"\n')
    vmat_file.write(f'\tg_nScaleTexCoordVByModelScaleAxis "0"\n')
    vmat_file.write(f'\tg_vTexCoordOffset "[0.000 0.000]"\n')
    vmat_file.write(f'\tg_vTexCoordScale "[1.000 1.000]"\n')
    vmat_file.write(f'\tg_vTexCoordScrollSpeed "[0.000 0.000]"\n')

    # scaling, todo: fix
    vmat_file.write(f'\tSystemAttributes\n')
    vmat_file.write('\t{\n')
    vmat_file.write(f'\t\tWorldMappingWidth "{mat_params["mat_world_width"]}"\n')
    vmat_file.write(f'\t\tWorldMappingHeight "{mat_params["mat_world_height"]}"\n')
    vmat_file.write(f'\t\tPhysicsSurfaceProperties "{mat_params["mat_surfprop"]}"\n')
    vmat_file.write('\t}\n')

    vmat_file.write("}\n")

    vmat_file.close()

    return True

list_file = open(f"./MATERIALS.md", "w")
list_file.write(f"# Materials")

subfolders_authors = [ f.path for f in os.scandir("./materials") if f.is_dir() ]

for folder_author in subfolders_authors:

    print(f"\nCheck author: {folder_author}")

    list_file.write(f"\n## {Path(folder_author).name}")

    subfolders = [ f.path for f in os.scandir(folder_author) if f.is_dir() ]

    for folder in subfolders:

        print(f"\nCheck material: {folder}")

        list_file.write(f"\n- {Path(folder).name}")

        files = os.scandir(folder)

        # check if exists
        #exists = False
        #for file in files:
        #    extension = os.path.splitext(file.name)[1]
        #    if extension == ".vmat_c" or extension == ".vmat":
        #        # print(f"Skip: {file}")
        #        exists = True
        #        break
        #  
        #if exists:
        #    continue

        print(f"Make for: {folder}")

        vmat = ""

        material_name = os.path.basename(folder).split("_")[0].lower()
        material_path = os.path.realpath(folder).split("ambientcg\\")[1].replace("\\", "/")

        mat_params = {
            "mat_shader": "simple.vfx",
            "mat_color_path": "",
            "mat_normal_path": "",
            "mat_ao_path": "",
            "mat_rough_path": "",
            "mat_metalness_path": "",
            "mat_opacity_path": "",
            "mat_height_path": "",
            "mat_surfprop": "default",
            "mat_world_width": 128,
            "mat_world_height": 128,
        }
        
        # sane defaults for 2k
        

        flip_normals = True

        files = os.scandir(folder) # why again
        for file in files:

            if Path(file).suffix not in [".jpg", ".tga", ".png"]:
                continue

            # print(f"Check file: {Path(file).stem}")

            m_type = Path(file).stem.rsplit("_", 1)[1]
            # m_type = os.path.basename(file).rsplit("_", 1)[1]
            m_path = material_path + "/" + Path(file).name
            
            print(f"File {Path(file).stem}: {m_type}")
            
            if m_type in ["Color", "BaseColor"]:
                mat_params["mat_color_path"] = m_path

            if m_type == "Normal":
                mat_params["mat_normal_path"] = m_path
                
                # invert normal
                if flip_normals:
                    normal_settings = open( Path(file).with_suffix(".txt"), "w" )
                    normal_settings.write('"settings"\n')
                    normal_settings.write('{\n')
                    normal_settings.write('\t"legacy_source1_inverted_normal"\t\t"1"\n')
                    normal_settings.write('}\n')
                    normal_settings.close()
            
            if m_type == "Roughness":
                mat_params["mat_rough_path"] = m_path

            if m_type == "Metalness":
                mat_params["mat_metalness_path"] = m_path

            if m_type in ["AmbientOcclusion", "AO"]:
                mat_params["mat_ao_path"] = m_path
            
            if m_type == "Opacity":
                mat_params["mat_opacity_path"] = m_path

            if m_type in ["Height", "Displacement"]:
                mat_params["mat_height_path"] = m_path


        if mat_params["mat_opacity_path"]:
            mat_params["mat_shader"] = "complex.vfx"
        
        if not mat_params["mat_color_path"]:
            print(f"[ERROR] Invalid material: {material_name} (no color path)")
            continue

        mat_params["mat_surfprop"] = material_name[:-3] # remove '001'

        print(f"Material name: {material_name}")

        output_vmat(folder, material_name, mat_params)
        output_vmat(folder, material_name + "_white", mat_params, white=True)
        output_vmat(folder, material_name + "_dirty", mat_params, dirty=True)

        if mat_params["mat_height_path"]:
            output_vmat(folder, material_name + "_parallax", mat_params, parallax=True)

    list_file.write(f"\n")

    # print(subfolders)

list_file.close()