
import os
from pathlib import Path

subfolders = [ f.path for f in os.scandir(".") if f.is_dir() ]

for folder in subfolders:
    # print(folder)

    files = os.scandir(folder)

    # check if exists
    exists = False
    for file in files:
        extension = os.path.splitext(file.name)[1]
        if extension == ".vmat_c" or extension == ".vmat":
            # print(f"Skip: {file}")
            exists = True
            break

    if exists:
        continue

    print(f"Make for: {folder}")

    vmat = ""

    material_name = os.path.basename(folder).split("_")[0].lower()
    material_path = os.path.realpath(folder).split("ambientcg\\")[1].replace("\\", "/")

    mat_shader = "simple.vfx"
    mat_color_path = ""
    mat_normal_path = ""
    mat_ao_path = ""
    mat_rough_path = ""
    mat_metalness_path = ""
    mat_opacity_path = ""
    mat_surfprop = "default"

    # sane defaults for 2k
    mat_world_width = 128
    mat_world_height = 128

    flip_normals = True

    files = os.scandir(folder) # why again
    for file in files:

        if Path(file).suffix == ".txt":
            continue

        m_type = Path(file).stem.rsplit("_", 1)[1]
        # m_type = os.path.basename(file).rsplit("_", 1)[1]
        m_path = material_path + "/" + Path(file).name
        print(f"File {file}: {m_type}")
        
        if m_type == "Color":
            mat_color_path = m_path

        if m_type == "Normal":
            mat_normal_path = m_path
            
            # invert normal
            if flip_normals:
                normal_settings = open( Path(file).with_suffix(".txt"), "w" )
                normal_settings.write('"settings"\n')
                normal_settings.write('{\n')
                normal_settings.write('\t"legacy_source1_inverted_normal"\t\t"1"\n')
                normal_settings.write('}\n')
                normal_settings.close()
        
        if m_type == "Roughness":
            mat_rough_path = m_path

        if m_type == "Metalness":
            mat_metalness_path = m_path

        if m_type == "AmbientOcclusion":
            mat_ao_path = m_path
        
        if m_type == "Opacity":
            mat_opacity_path = m_path


    if mat_opacity_path:
        mat_shader = "complex.vfx"
    
    if not mat_color_path:
        print(f"Invalid material: {material_name}")
        continue

    mat_surfprop = material_name[:-3] # remove '001'

    print(f"Material name: {material_name}")

    vmat_file = open(f"{folder}\\{material_name}.vmat", "w")

    vmat_file.write("// Auto generated by Python!\n")
    vmat_file.write("Layer0\n")
    vmat_file.write("{\n")

    vmat_file.write(f"\tshader \"{mat_shader}\"\n")

    if mat_shader == "complex.vfx":
        vmat_file.write('\tF_SPECULAR 1\n')

    # TINT
    vmat_file.write('\tg_flModelTintAmount "1.000\"\n')
    vmat_file.write('\tg_vColorTint "[1.000000 1.000000 1.000000 0.000000]"\n')

    # BASE COLOR
    vmat_file.write(f'\tTextureColor "{mat_color_path}"\n')

    vmat_file.write(f'\tg_flFadeExponent "1.000"\n')
    vmat_file.write(f'\tg_bFogEnabled "1"\n')

    vmat_file.write(f'\tg_flDirectionalLightmapMinZ "0.050"\n')
    vmat_file.write(f'\tg_flDirectionalLightmapStrength "1.000"\n')    

    # NORMAL
    if mat_normal_path:
        vmat_file.write(f'\tTextureNormal "{mat_normal_path}"\n')

    # ROUGHNESS
    if mat_rough_path:
        vmat_file.write(f'\tTextureRoughness "{mat_rough_path}"\n')

    # AMBIENT OCCLUSION
    if mat_ao_path:
        vmat_file.write(f'\tTextureAmbientOcclusion "{mat_ao_path}"\n')
        vmat_file.write(f'\tg_flAmbientOcclusionDirectDiffuse "0.000"\n')
        vmat_file.write(f'\tg_flAmbientOcclusionDirectSpecular "0.000"\n')

    # METALNESS
    if mat_metalness_path:
        vmat_file.write(f'\tF_METALNESS_TEXTURE 1\n')
        vmat_file.write(f'\tTextureMetalness "{mat_metalness_path}"\n')
    else:
        vmat_file.write(f'\tg_flMetalness "0.000"\n')

    # OPACITY
    if mat_opacity_path:
        vmat_file.write(f'\tF_ALPHA_TEST 1\n')
        vmat_file.write(f'\tg_flAlphaTestReference "0.500"\n')
        vmat_file.write(f'\tg_flAntiAliasedEdgeStrength "1.000"\n')
        vmat_file.write(f'\tTextureTranslucency "{mat_opacity_path}"\n')

    vmat_file.write(f'\tg_nScaleTexCoordUByModelScaleAxis "0"\n')
    vmat_file.write(f'\tg_nScaleTexCoordVByModelScaleAxis "0"\n')
    vmat_file.write(f'\tg_vTexCoordOffset "[0.000 0.000]"\n')
    vmat_file.write(f'\tg_vTexCoordScale "[1.000 1.000]"\n')
    vmat_file.write(f'\tg_vTexCoordScrollSpeed "[0.000 0.000]"\n')

    # scaling, todo: fix
    vmat_file.write(f'\tSystemAttributes\n')
    vmat_file.write('\t{\n')
    vmat_file.write(f'\t\tWorldMappingWidth "{mat_world_width}"\n')
    vmat_file.write(f'\t\tWorldMappingHeight "{mat_world_height}"\n')
    vmat_file.write(f'\t\tPhysicsSurfaceProperties "{mat_surfprop}"\n')
    vmat_file.write('\t}\n')


    vmat_file.write("}\n")

    vmat_file.close();

# print(subfolders)